eval(decodeURIComponent(escape(atob("document.addEventListener("DOMContentLoaded", function() {
        // Set today's date as default
        document.getElementById("tanggal").value = new Date().toISOString().split("T")[0];
        
        // Real-time Clock
        setInterval(() => {
            const now = new Date();
            document.getElementById("realTime").textContent = `Waktu: ${now.toLocaleTimeString('id-ID')}`;
        }, 1000);
        
        // Load saved data
        const savedData = JSON.parse(localStorage.getItem("omsetData"));
        if (savedData) {
            Object.keys(savedData).forEach(id => {
                document.getElementById(id).value = savedData[id];
            });
            calculateTotals();
        }
        
        // Format currency
        function formatCurrency(value) {
            return 'Rp ' + Number(value).toLocaleString("id-ID");
        }
        
        // Calculate totals and update fields
        function calculateTotals() {
            let omsetBersih = Number(document.getElementById("omsetBersih").value.replace(/[^\d]/g, ""));
            let pajak = Number(document.getElementById("pajak").value.replace(/[^\d]/g, ""));
            let totalPengeluaran = [...document.querySelectorAll("#onlineList .currency-input, #offlineList .currency-input")]
                .reduce((sum, input) => sum + Number(input.value.replace(/[^\d]/g, "")), 0);
            let sisaOmset = omsetBersih - totalPengeluaran;
            let omsetPlus = sisaOmset + pajak;
            document.getElementById("omsetKotor").value = formatCurrency(omsetBersih + pajak);
            document.getElementById("totalPengeluaran").value = formatCurrency(totalPengeluaran);
            document.getElementById("sisaOmset").value = formatCurrency(sisaOmset);
            document.getElementById("omsetPlus").value = formatCurrency(omsetPlus);
            
            // Save data to local storage
            const formData = {};
            document.querySelectorAll("#omsetForm .currency-input, #tanggal, #shift").forEach(input => {
                formData[input.id] = input.value;
            });
            localStorage.setItem("omsetData", JSON.stringify(formData));
        }
        
        // Attach event listener for currency input
        document.querySelectorAll(".currency-input").forEach(input => {
            input.addEventListener("input", () => {
                input.value = formatCurrency(input.value.replace(/[^\d]/g, ""));
                calculateTotals();
            });
        });
        
        // Reset button
        document.getElementById("resetBtn").addEventListener("click", function() {
            if (confirm("Apakah Anda yakin ingin menghapus semua data?")) {
                localStorage.removeItem("omsetData");
                document.getElementById("omsetForm").reset();
                calculateTotals();
            }
        });
        
        // Send WhatsApp button
        document.getElementById("sendBtn").addEventListener("click", function() {
            // Ambil nilai input
            let tanggal = document.getElementById("tanggal").value;
            let shift = document.getElementById("shift").value;
            let omsetKotor = document.getElementById("omsetKotor").value;
            let goFood = document.getElementById("gofood").value || 0;
            let grabFood = document.getElementById("grabfood").value || 0;
            let shopeeFood = document.getElementById("shopeefood").value || 0;
            let qrisMandiri = document.getElementById("qrisMandiri").value || 0;
            let qrisBri = document.getElementById("qrisBri").value || 0;
            let debitMandiri = document.getElementById("debitMandiri").value || 0;
            let debitBri = document.getElementById("debitBri").value || 0;
            let totalPengeluaran = document.getElementById("totalPengeluaran").value || 0;
            
            // Hitung total
            let total = parseFloat(goFood) + parseFloat(grabFood) + parseFloat(shopeeFood) + parseFloat(qrisMandiri) + parseFloat(qrisBri) + parseFloat(debitMandiri) + parseFloat(debitBri);
            
            // Format pesan
           let message = `╔═════════════════════════╗\n` +
 `║ *Tanggal         : ${tanggal}*\n` +
 `║ *Shift              : ${shift}*\n` +
 `║ *Omset           : ${omsetKotor}*\n` +
 `╠═════════════════════════╣\n` +
 `╠➢ \`\`\`GoFood        : ${goFood} \`\`\` \n` +
 `╠➢ \`\`\`GrabFood      : ${grabFood} \`\`\` \n` +
 `╠➢ \`\`\`ShopeeFood    : ${shopeeFood} \`\`\` \n` +
 `╠➢ \`\`\`Qris Mandiri  : ${qrisMandiri} \`\`\` \n` +
 `╠➢ \`\`\`Qris Bri      : ${qrisBri} \`\`\` \n` +
 `╠➢ \`\`\`Debit Mandiri : ${debitMandiri} \`\`\` \n` +
 `╠➢ \`\`\`Debit Bri     : ${debitBri} \`\`\` \n` +
 `╠═════════════════════════╣\n` +
 `║ *Jumlah          : ${totalPengeluaran}*\n` +
 `╠═════════════════════════╣\n` +
 `║                   ᶜᵒᵖʸʳⁱᵍʰᵗ ©ᵃᵍ⁶⁴⁴⁶²\n` +
 `╚═════════════════════════╝`;


            // Buka WhatsApp dengan pesan yang diformat
            window.open(`https://wa.me/?text=${encodeURIComponent(message)}`, "_blank");
        });
    });
    
    // Toggle collapse for accordions
    function toggleCollapse(id) {
        $('#' + id).collapse('toggle');
    }
    
    // Memutar audio otomatis saat website terbuka
    document.addEventListener("DOMContentLoaded", function(event) {
      var audio = new Audio('https://github.com/Agus38/Audio/raw/main/DJ%20KANASHIMI.mp3');
      audio.play();
    });
    
    
    
        let currentPlaying = null; // Menyimpan ID tombol yang sedang diputar

    function toggleAudioList() {
      const audioList = document.getElementById('audioList');
      if (audioList.style.display === 'none' || audioList.style.display === '') {
        audioList.style.display = 'block';
        audioList.style.maxHeight = audioList.scrollHeight + "px";
      } else {
        audioList.style.maxHeight = '0';
        setTimeout(() => {
          audioList.style.display = 'none';
        }, 500);
      }
    }

    function playPauseAudio(src, btnId) {
      const audioPlayer = document.getElementById('audioPlayer');
      const button = document.getElementById(btnId);

      // Jika tombol yang sama diklik
      if (currentPlaying === btnId) {
        if (!audioPlayer.paused) {
          audioPlayer.pause();
          button.innerHTML = '<i class="fas fa-play"></i>';
        } else {
          audioPlayer.play();
          button.innerHTML = '<i class="fas fa-pause"></i>';
        }
        return;
      }

      // Jika audio baru dimainkan
      if (currentPlaying) {
        const prevButton = document.getElementById(currentPlaying);
        prevButton.innerHTML = '<i class="fas fa-play"></i>';
      }

      currentPlaying = btnId;
      audioPlayer.src = src;
      audioPlayer.play();
      button.innerHTML = '<i class="fas fa-pause"></i>';
    }"))));
